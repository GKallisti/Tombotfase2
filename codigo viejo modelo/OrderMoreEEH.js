'use strict';

// node fetch API can be used to make REST calls, see https://www.npmjs.com/package/node-fetch
const fetch = require("node-fetch");

module.exports = {
    metadata: {
        name: 'OrderMoreEEH',
        eventHandlerType: 'ResolveEntities',
        supportedActions: ["orderMore","checkout"] // string array of transition actions that might be set by the event handler
    },
    handlers: {
        entity: {
            /**
             * Generic fallback handler that is called when item-specific prompt or disambiguate handler is not specified for the item currently being resolved.
             * Used here to provide acknowledgements when a bag item is updated or a bag item value is provided while the user was prompted for another item.
             *
             * @param {object} event - event object contains the following properties:
             * - currentItem: name of item currently being resolved
             * - promptCount: number of times the user is prompted for current item (only set in case of prompt event)
             * - disambiguationValues: JSONArray with a list of values for the current item that match the user input only set in case of disambiguate event)
             * @param {object} context - entity resolution context, see https://oracle.github.io/bots-node-sdk/module-Lib.EntityResolutionContext.html
             */
            publishMessage: async (event, context) => {
                updatedItemsMessage(context);
                outOfOrderItemsMessage(context);
                context.addCandidateMessages();
            },

            /**
             * Handler that gets called when the composite bag entity is resolved. You will typically use this function to call some backend API to 
             * complete the transaction which the composite bag entity collected the data for. If the backend API call return some errors, possibly 
             * forcing you to re-prompt for some invalid bag items, you can do so by simply clearing those bag items. The RE/CRC component will notice 
             * the entity is not fully resolved after all, and will resume prompting for missing bag items.
             *
             * @param {object} event - event object contains no properties for this handler
             * @param {object} context - entity resolution context, see https://oracle.github.io/bots-node-sdk/EntityResolutionContext.html
             */
            resolved: async (event, context) => {
                    // entity is resolved, let's transition accordingly.
                    let userResponse = context.getItemValue("OrderMore").primaryLanguageValue;
                    context.logger().info(`User Response: ${userResponse}`);

                    // user response is pizza or drink, so reset variables and proceed to placing another order
                    if (userResponse == 'Pizza' || userResponse == 'Drink') {
                        // set intent name to OrderPizza or OrderDrink
                        context.setVariable('intentName',`Order${userResponse}`);
                        context.setTransitionAction(`orderMore`);
                    } else {
                        // user wants to pay, so take transition to checkout
                        context.setTransitionAction('checkout');
                    }



                }

                ,
        },

        items: {

            OrderMore: {

                /**
                 * Handler that can be used to replace or extend the bot message generated by ResolveEntities (RE) or Common Response Component (CRC) to prompt for the item. 
                 * RE/CRC takes the prompt from the prompts registered in the edit composite bag item screen. 
                 * To use the RE/CRC generated messages, you can call context.addCandidateMessages().
                 * 
                 * @param {object} event - event object contains the following properties:
                 * - promptCount: number of times the user is prompted for current item.
                 * @param {object} context - entity resolution context, see https://oracle.github.io/bots-node-sdk/EntityResolutionContext.html
                 */
                publishPromptMessage: async (event, context) => {
                    let promptMessage = context.getCandidateMessages()[0];
                    let MessageModel = context.getMessageModel();
                    let actions = [];
                    actions.push();
                    actions.push(MessageModel.postbackActionObject(context.translate('eeh.OrderMoreEEH.pizza.label'), null, {
                        variables: {intentName: 'OrderPizza'},
                        action: 'orderMore'
                    }));
                    actions.push(MessageModel.postbackActionObject(context.translate('eeh.OrderMoreEEH.drink.label'), null, {
                        variables: {intentName: 'OrderDrink'},
                        action: 'orderMore'
                    }));
                    actions.push(MessageModel.postbackActionObject(context.translate('eeh.OrderMoreEEH.checkout.label'), null, {
                        action: 'checkout'
                    }));
                  
                    //reset system nlp
                    context.setVariable('skill.system.nlpresult',null);
                    context.getCandidateMessages()[0] = MessageModel.textConversationMessage(promptMessage.text, actions);
                    context.addCandidateMessages();
                }
            }

        }

    }
};

/**
 * Helper function to show acknowledgement message when a bag item value is updated.
 */
function updatedItemsMessage(context) {
    if (context.getItemsUpdated().length > 0) {
        let message = "I have updated" + context.getItemsUpdated().map((item, i) => (i !== 0 ? " and the " : " the ") + item.toLowerCase() + " to " + context.getDisplayValue(item));
        context.addMessage(message);
    }
}

/**
 * Helper function to show acknowledgement message when a bag item value is provided when user was prompted for anther bag item.
 */
function outOfOrderItemsMessage(context) {
    if (context.getItemsMatchedOutOfOrder().length > 0) {
        let message = "I got" + context.getItemsMatchedOutOfOrder().map((item, i) => (i !== 0 ? " and the " : " the ") + item.toLowerCase() + " " + context.getDisplayValue(item));
        context.addMessage(message);
    }
}